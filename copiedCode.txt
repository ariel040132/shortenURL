// function generateShortUrl() {
//   let shortUrl = "";
//   const characters =
//     "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

//   for (let i = 0; i < 6; i++) {
//     shortUrl += characters.charAt(
//       Math.floor(Math.random() * characters.length)
//     );
//   }

//   return shortUrl;
// }
// async function createShortUrl(req, res) {
//   const { originalUrl } = req.body;

//   try {
//     const existingUrl = await UrlSchema.findOne({ originalUrl });

//     if (existingUrl) {
//       res.json({ shortUrl: existingUrl.shortUrl });
//     } else {
//       const shortUrl = generateShortUrl();

//       const newUrl = new Url({
//         originalUrl: originalUrl,
//         shortUrl: shortUrl,
//       });

//       await newUrl.save();

//       res.json({ shortUrl });
//     }
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ error: "Internal server error" });
//   }
// }
// app.post("/shorten", createShortUrl);
const express = require("express");
const exphbs = require("express-handlebars");
const bodyParser = require("body-parser");
const port = 3000;
const mongoose = require("mongoose");
const methodOverride = require("method-override");
const UrlSchema = require("./models/url");
const shortenFunction = require("./utils/shortenFunction");

if (process.env.NODE_ENV !== "production") {
  require("dotenv").config();
}
mongoose
  .connect(process.env.MONGODB_URI, { useNewUrlParser: true })
  .then(() => console.log("Connected to MongoDB"))
  .catch((err) => console.error("Error connecting to MongoDB", err));
const db = mongoose.connection;
db.on("error", () => {
  console.log("mongodb error!");
});
db.once("open", () => {
  console.log("mongodo connected!");
});

// app setting
const app = express();
app.engine("handlebars", exphbs.engine({ defaultLayout: "main" }));
app.use(bodyParser.urlencoded({ extended: true }));
app.set("view engine", "handlebars");
app.use(express.static("public"));
app.use(methodOverride("_method"));

//setting routes
app.get("/", (req, res) => {
  res.render("index");
});

//! 寫入資料庫 － 表單 action 屬性
app.post("/shorten", (req, res) => {
  if (!req.body.originalUrl) return res.redirect("/");
  const shortURL = shortenFunction;
  //! 解構賦值
  const { originalUrl } = req.body;
  UrlSchema.findOne({ originalUrl: req.body.originalUrl })
    .then((data) => {
      data
        ? data
        : UrlSchema.create({ shortURL, originalUrl: req.body.originalUrl });
      console.log("shortURL = ", shortURL);
      console.log("originalURL = ", originalUrl);
    })
    .then((data) => {
      res.render("index", {
        originalUrl: req.headers.originalUrl,
        shortURL: data.shortURL,
      });
      console.log("req.headers = ", req.headers);
    })
    .catch((err) => console.error(err));
});

app.get("/shortenProject/:shortUrl", (req, res) => {
  const { shortURL } = req.params;
  UrlSchema.findOne({ shortURL })
    .then((data) => {
      if (!data) {
        return res.render("error", {
          errorMsg: "Can't found the URL",
          errorURL: req.headers.host + "/" + shortURL,
        });
      }
      res.redirect(data.originalUrl);
    })
    .catch((error) => console.log(error));
});

// ! 底部
app.listen(port, () => {
  console.log(`Express app listening on port ${port}.`);
});
